// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackInternship.Data.Entities;

namespace StackInternship.Data.Migrations
{
    [DbContext(typeof(StackInternshipDbContext))]
    [Migration("20220106104447_UpdateDefaultPasswordInSeed")]
    partial class UpdateDefaultPasswordInSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Downvote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Downvotes");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.ResourceView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("ResourceViews");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Upvote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Upvotes");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedUntil")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("HashedPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 48, 120, 69, 65, 70, 50, 67, 49, 50, 55, 52, 50, 67, 66, 56, 67, 49, 54, 49, 66, 67, 66, 68, 56, 52, 66, 48, 51, 50, 66, 57, 66, 66, 57, 56, 57, 57, 57, 65, 50, 51, 50, 56, 50, 53, 52, 50, 54, 55, 50, 67, 65, 48, 49, 67, 67, 54, 69, 68, 68, 50, 54, 56, 70, 55, 68, 67, 69, 57, 57, 56, 55, 65, 68, 54, 66, 50, 66, 67, 55, 57, 51, 48, 53, 54, 51, 52, 70, 56, 57, 68, 57, 48, 66, 57, 48, 49, 48, 50, 66, 67, 68, 53, 57, 65, 53, 55, 69, 55, 49, 51, 53, 66, 56, 69, 51, 67, 69, 66, 57, 51, 67, 48, 53, 57, 55, 49, 49, 55, 66 },
                            IsOrganizer = false,
                            Username = "ivan"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 48, 120, 69, 65, 70, 50, 67, 49, 50, 55, 52, 50, 67, 66, 56, 67, 49, 54, 49, 66, 67, 66, 68, 56, 52, 66, 48, 51, 50, 66, 57, 66, 66, 57, 56, 57, 57, 57, 65, 50, 51, 50, 56, 50, 53, 52, 50, 54, 55, 50, 67, 65, 48, 49, 67, 67, 54, 69, 68, 68, 50, 54, 56, 70, 55, 68, 67, 69, 57, 57, 56, 55, 65, 68, 54, 66, 50, 66, 67, 55, 57, 51, 48, 53, 54, 51, 52, 70, 56, 57, 68, 57, 48, 66, 57, 48, 49, 48, 50, 66, 67, 68, 53, 57, 65, 53, 55, 69, 55, 49, 51, 53, 66, 56, 69, 51, 67, 69, 66, 57, 51, 67, 48, 53, 57, 55, 49, 49, 55, 66 },
                            IsOrganizer = true,
                            Username = "marko"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashedPassword = new byte[] { 48, 120, 69, 65, 70, 50, 67, 49, 50, 55, 52, 50, 67, 66, 56, 67, 49, 54, 49, 66, 67, 66, 68, 56, 52, 66, 48, 51, 50, 66, 57, 66, 66, 57, 56, 57, 57, 57, 65, 50, 51, 50, 56, 50, 53, 52, 50, 54, 55, 50, 67, 65, 48, 49, 67, 67, 54, 69, 68, 68, 50, 54, 56, 70, 55, 68, 67, 69, 57, 57, 56, 55, 65, 68, 54, 66, 50, 66, 67, 55, 57, 51, 48, 53, 54, 51, 52, 70, 56, 57, 68, 57, 48, 66, 57, 48, 49, 48, 50, 66, 67, 68, 53, 57, 65, 53, 55, 69, 55, 49, 51, 53, 66, 56, 69, 51, 67, 69, 66, 57, 51, 67, 48, 53, 57, 55, 49, 49, 55, 66 },
                            IsOrganizer = true,
                            Username = "ante"
                        });
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Comment", b =>
                {
                    b.HasOne("StackInternship.Data.Entities.Models.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StackInternship.Data.Entities.Models.Resource", "Resource")
                        .WithMany("Comments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackInternship.Data.Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Downvote", b =>
                {
                    b.HasOne("StackInternship.Data.Entities.Models.Comment", "Comment")
                        .WithMany("Downvotes")
                        .HasForeignKey("CommentId");

                    b.HasOne("StackInternship.Data.Entities.Models.Resource", "Resource")
                        .WithMany("Downvotes")
                        .HasForeignKey("ResourceId");

                    b.HasOne("StackInternship.Data.Entities.Models.User", "User")
                        .WithMany("Downvotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Resource", b =>
                {
                    b.HasOne("StackInternship.Data.Entities.Models.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.ResourceView", b =>
                {
                    b.HasOne("StackInternship.Data.Entities.Models.Resource", "Resource")
                        .WithMany("Views")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackInternship.Data.Entities.Models.User", "User")
                        .WithMany("Views")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Upvote", b =>
                {
                    b.HasOne("StackInternship.Data.Entities.Models.Comment", "Comment")
                        .WithMany("Upvotes")
                        .HasForeignKey("CommentId");

                    b.HasOne("StackInternship.Data.Entities.Models.Resource", "Resource")
                        .WithMany("Upvotes")
                        .HasForeignKey("ResourceId");

                    b.HasOne("StackInternship.Data.Entities.Models.User", "User")
                        .WithMany("Upvotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.Resource", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("StackInternship.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Downvotes");

                    b.Navigation("Resources");

                    b.Navigation("Upvotes");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
